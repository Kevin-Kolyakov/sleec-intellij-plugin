{
  parserClass="com.example.sleeclanguageextension.SleecParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Sleec"
  psiImplClassSuffix="Impl"
  psiPackage="com.example.sleeclanguageextension.psi"
  psiImplPackage="com.example.sleeclanguageextension.impl"

  elementTypeHolderClass="com.example.sleeclanguageextension.SleecTypes"
  elementTypeClass="com.example.sleeclanguageextension.SleecElementType"
  tokenTypeClass="com.example.sleeclanguageextension.SleecTokenType"

    psiImplUtilClass="com.example.sleeclanguageextension.SleecPsiImplUtil"

  tokens=[
    SEMI=';'
    EQ='='
    LP='('
    RP=')'

    space='regexp:\s+'
    comment='regexp://.*'
    number='regexp:\d+(\.\d*)?'
    def_start = 'def_start'
    def_end = 'def_end'
    rule_start = 'rule_start'
    rule_end = 'rule_end'
    concern_start = 'concern_start'
    concern_end = 'concern_end'
    id='regexp:\p{Alpha}\w*'
    string="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"

    op_1='+'
    op_2='-'
    op_3='*'
    op_4='/'
    op_5='!'

  ]

  name(".*expr")='expression'
  extends(".*expr")=expr
}


root ::=  root_item *
ender ::= def_end
private root_item ::=  property  {pin=1 recoverWhile=property_recover}

property ::= !<<eof>> propert* {pin=1}
propert ::=  starter * properties* ender
properties::= id '=' expr ';' {pin=2}
private starter ::= def_start|rule_start|concern_start

private property_recover ::= !(';' | id '=')

expr ::= factor plus_expr *
left plus_expr ::= plus_op factor
private plus_op ::= '+'|'-'
private factor ::= primary mul_expr *
left mul_expr  ::= mul_op primary
private mul_op ::= '*'|'/'
private primary ::= primary_inner factorial_expr ?
left factorial_expr ::= '!'
private primary_inner ::= literal_expr | ref_expr | paren_expr
paren_expr ::= '(' expr ')' {pin=1}
ref_expr ::= id
literal_expr ::= number | string | float