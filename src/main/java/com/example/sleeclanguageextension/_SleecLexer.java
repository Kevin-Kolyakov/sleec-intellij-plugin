/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.example.sleeclanguageextension;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.example.sleeclanguageextension.SleecTypes.*;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_SleecLexer.flex</tt>
 */
public class _SleecLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 14432 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43"+
    "\11\11\1\44\2\11\1\45\5\11\1\46\4\11\1\47\1\50\4\11\51\14\1\51\3\14\1\52\1"+
    "\53\4\14\1\54\12\11\1\55\u0381\11");

  /* The ZZ_CMAP_Y table has 2944 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\10\1\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\24\12\13\1\25"+
    "\1\13\1\26\1\25\1\13\1\27\4\1\1\13\1\30\1\31\2\1\2\13\1\30\1\1\1\32\1\25\5"+
    "\13\1\33\1\34\1\35\1\1\1\36\1\13\1\1\1\37\5\13\1\40\1\41\1\42\1\13\1\30\1"+
    "\43\1\13\1\44\1\45\1\1\1\13\1\46\4\1\1\13\1\47\4\1\1\50\2\13\1\51\1\1\1\52"+
    "\1\53\1\25\1\54\1\55\1\56\1\57\1\60\1\61\1\53\1\16\1\62\1\55\1\56\1\63\1\1"+
    "\1\64\1\65\1\66\1\67\1\22\1\56\1\70\1\1\1\71\1\53\1\72\1\73\1\55\1\56\1\70"+
    "\1\1\1\61\1\53\1\41\1\74\1\75\1\76\1\77\1\1\1\71\1\65\1\1\1\100\1\36\1\56"+
    "\1\51\1\1\1\101\1\53\1\1\1\102\1\36\1\56\1\103\1\1\1\60\1\53\1\104\1\100\1"+
    "\36\1\13\1\105\1\60\1\106\1\53\1\107\1\110\1\111\1\13\1\112\1\113\1\1\1\65"+
    "\1\1\1\25\2\13\1\114\1\113\1\115\2\1\1\116\1\117\1\120\1\121\1\122\1\123\2"+
    "\1\1\71\1\1\1\115\1\1\1\124\1\13\1\125\1\1\1\126\7\1\2\13\1\30\1\127\1\115"+
    "\1\130\1\131\1\132\1\133\1\115\2\13\1\134\2\13\1\135\24\13\1\136\1\137\2\13"+
    "\1\136\2\13\1\140\1\141\1\14\3\13\1\141\3\13\1\30\2\1\1\13\1\1\5\13\1\142"+
    "\1\25\45\13\1\143\1\13\1\144\1\30\4\13\1\30\1\145\1\146\1\16\1\13\1\16\1\13"+
    "\1\16\1\146\1\71\3\13\1\147\1\1\1\150\1\115\2\1\1\115\5\13\1\27\1\151\1\13"+
    "\1\152\4\13\1\40\1\13\1\153\2\1\1\65\1\13\1\154\1\155\2\13\1\156\1\13\1\77"+
    "\1\115\2\1\1\13\1\113\3\13\1\155\2\1\2\115\1\157\5\1\1\110\2\13\1\147\1\160"+
    "\1\115\2\1\1\161\1\13\1\162\1\42\2\13\1\40\1\1\2\13\1\147\1\1\1\163\1\42\1"+
    "\13\1\154\1\46\5\1\1\164\1\165\14\13\4\1\21\13\1\142\2\13\1\142\1\166\1\13"+
    "\1\154\3\13\1\167\1\170\1\171\1\125\1\170\1\172\1\1\1\173\2\1\1\174\1\1\1"+
    "\175\1\1\1\125\6\1\1\176\1\177\1\200\1\201\1\202\3\1\1\203\147\1\2\13\1\153"+
    "\2\13\1\153\10\13\1\204\1\205\2\13\1\134\3\13\1\206\1\1\1\13\1\113\4\207\4"+
    "\1\1\127\35\1\1\210\2\1\1\211\1\25\4\13\1\212\1\25\4\13\1\135\1\110\1\13\1"+
    "\154\1\25\4\13\1\153\1\1\1\13\1\30\3\1\1\13\40\1\133\13\1\40\4\1\135\13\1"+
    "\40\2\1\10\13\1\125\4\1\2\13\1\154\20\13\1\125\1\13\1\213\1\1\2\13\1\153\1"+
    "\127\1\13\1\154\4\13\1\40\2\1\1\214\1\215\5\13\1\216\1\13\1\153\1\27\3\1\1"+
    "\214\1\217\1\13\1\31\1\1\3\13\1\147\1\215\2\13\1\147\1\1\1\115\1\1\1\220\1"+
    "\42\1\13\1\40\1\13\1\113\1\1\1\13\1\125\1\50\2\13\1\31\1\127\1\115\1\221\1"+
    "\222\2\13\1\46\1\1\1\223\1\115\1\13\1\224\3\13\1\225\1\226\1\227\1\30\1\66"+
    "\1\230\1\231\1\207\2\13\1\135\1\40\7\13\1\31\1\115\72\13\1\147\1\13\1\232"+
    "\2\13\1\156\20\1\26\13\1\154\6\13\1\77\2\1\1\113\1\233\1\56\1\234\1\235\6"+
    "\13\1\16\1\1\1\161\25\13\1\154\1\1\4\13\1\215\2\13\1\27\2\1\1\156\7\1\1\221"+
    "\7\13\1\125\1\1\1\115\1\25\1\30\1\25\1\30\1\236\4\13\1\153\1\237\1\240\2\1"+
    "\1\241\1\13\1\14\1\242\2\154\2\1\7\13\1\30\30\1\1\13\1\125\3\13\1\71\2\1\2"+
    "\13\1\1\1\13\1\243\2\13\1\40\1\13\1\154\2\13\1\244\3\1\11\13\1\154\1\115\2"+
    "\13\1\244\1\13\1\156\2\13\1\27\3\13\1\147\11\1\23\13\1\113\1\13\1\40\1\27"+
    "\11\1\1\245\2\13\1\246\1\13\1\40\1\13\1\113\1\13\1\153\4\1\1\13\1\247\1\13"+
    "\1\40\1\13\1\77\4\1\3\13\1\250\4\1\1\71\1\251\1\13\1\147\2\1\1\13\1\125\1"+
    "\13\1\125\2\1\1\124\1\13\1\155\1\1\3\13\1\40\1\13\1\40\1\13\1\31\1\13\1\16"+
    "\6\1\4\13\1\46\3\1\3\13\1\31\3\13\1\31\60\1\1\161\2\13\1\27\2\1\1\65\1\1\1"+
    "\161\2\13\2\1\1\13\1\46\1\115\1\161\1\13\1\113\1\65\1\1\2\13\1\252\1\161\2"+
    "\13\1\31\1\253\1\254\2\1\1\13\1\22\1\156\5\1\1\255\1\256\1\46\2\13\1\153\1"+
    "\1\1\115\1\73\1\55\1\56\1\70\1\1\1\257\1\16\11\1\3\13\1\155\1\260\1\115\2"+
    "\1\3\13\1\1\1\261\1\115\12\1\2\13\1\153\2\1\1\262\2\1\3\13\1\1\1\263\1\115"+
    "\2\1\2\13\1\30\1\1\1\115\3\1\1\13\1\77\1\1\1\115\26\1\4\13\1\115\1\127\34"+
    "\1\3\13\1\46\20\1\1\56\1\13\1\153\1\1\1\71\1\115\1\1\1\215\1\13\67\1\71\13"+
    "\1\77\16\1\14\13\1\147\53\1\2\13\1\153\75\1\44\13\1\113\33\1\43\13\1\46\1"+
    "\13\1\153\1\115\6\1\1\13\1\154\1\1\3\13\1\1\1\147\1\115\1\161\1\264\1\13\67"+
    "\1\4\13\1\155\1\71\3\1\1\161\4\1\1\71\1\1\76\13\1\125\1\1\57\13\1\31\20\1"+
    "\1\16\77\1\6\13\1\30\1\125\1\46\1\77\66\1\5\13\1\221\3\13\1\146\1\265\1\266"+
    "\1\267\3\13\1\270\1\271\1\13\1\272\1\273\1\36\24\13\1\274\1\13\1\36\1\135"+
    "\1\13\1\135\1\13\1\221\1\13\1\221\1\153\1\13\1\153\1\13\1\56\1\13\1\56\1\13"+
    "\1\275\3\276\14\13\1\155\3\1\4\13\1\147\1\115\112\1\1\267\1\13\1\277\1\300"+
    "\1\301\1\302\1\303\1\304\1\305\1\156\1\306\1\156\24\1\55\13\1\113\2\1\103"+
    "\13\1\155\15\13\1\154\150\13\1\16\25\1\41\13\1\154\36\1");

  /* The ZZ_CMAP_A table has 3184 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\4\1\22\0\1\2\1\46\1\14\4\0\1\12\2\0\1\45\1\43\1\0\1\44\1\5\1\3\12"+
    "\4\7\0\32\6\1\0\1\13\2\0\1\15\1\0\1\23\1\33\1\30\1\16\1\17\1\20\1\11\1\40"+
    "\1\35\2\11\1\27\1\34\1\25\1\31\1\32\1\11\1\24\1\21\1\22\1\26\1\36\1\37\1\42"+
    "\1\41\1\11\12\0\1\1\12\0\1\2\11\0\1\7\12\0\1\7\4\0\1\7\5\0\27\7\1\0\12\7\4"+
    "\0\14\7\16\0\5\7\7\0\1\7\1\0\1\7\1\0\5\7\1\0\2\7\2\0\4\7\1\0\1\7\6\0\1\7\1"+
    "\0\3\7\1\0\1\7\1\0\4\7\1\0\23\7\1\0\13\7\10\0\6\7\1\0\26\7\2\0\1\7\6\0\10"+
    "\7\10\0\13\7\5\0\3\7\15\0\12\10\4\0\6\7\1\0\1\7\17\0\2\7\7\0\2\7\12\10\3\7"+
    "\2\0\2\7\1\0\16\7\15\0\11\7\13\0\1\7\16\0\12\10\6\7\4\0\2\7\4\0\1\7\5\0\6"+
    "\7\4\0\1\7\11\0\1\7\3\0\1\7\7\0\11\7\7\0\5\7\1\0\10\7\6\0\26\7\3\0\1\7\2\0"+
    "\1\7\7\0\12\7\4\0\12\10\1\7\4\0\10\7\2\0\2\7\2\0\26\7\1\0\7\7\1\0\1\7\3\0"+
    "\4\7\3\0\1\7\20\0\1\7\15\0\2\7\1\0\1\7\5\0\6\7\4\0\2\7\1\0\2\7\1\0\2\7\1\0"+
    "\2\7\17\0\4\7\1\0\1\7\7\0\12\10\2\0\3\7\20\0\11\7\1\0\2\7\1\0\2\7\1\0\5\7"+
    "\3\0\1\7\2\0\1\7\30\0\1\7\13\0\10\7\2\0\1\7\3\0\1\7\1\0\6\7\3\0\3\7\1\0\4"+
    "\7\3\0\2\7\1\0\1\7\1\0\2\7\3\0\2\7\3\0\3\7\3\0\14\7\13\0\10\7\1\0\2\7\10\0"+
    "\3\7\5\0\1\7\4\0\10\7\1\0\6\7\1\0\5\7\3\0\1\7\3\0\2\7\15\0\13\7\2\0\1\7\6"+
    "\0\3\7\10\0\1\7\12\0\6\7\5\0\22\7\3\0\10\7\1\0\11\7\1\0\1\7\2\0\7\7\11\0\1"+
    "\7\1\0\2\7\14\0\12\10\7\0\2\7\1\0\1\7\2\0\2\7\1\0\1\7\2\0\1\7\6\0\4\7\1\0"+
    "\7\7\1\0\3\7\1\0\1\7\1\0\1\7\2\0\2\7\1\0\4\7\1\0\2\7\11\0\1\7\2\0\5\7\1\0"+
    "\1\7\11\0\12\10\2\0\14\7\1\0\24\7\13\0\5\7\22\0\7\7\4\0\4\7\3\0\1\7\3\0\2"+
    "\7\7\0\3\7\4\0\15\7\14\0\1\7\1\0\6\7\1\0\1\7\5\0\1\7\2\0\13\7\1\0\15\7\1\0"+
    "\4\7\2\0\7\7\1\0\1\7\1\0\4\7\2\0\1\7\1\0\4\7\2\0\7\7\1\0\1\7\1\0\4\7\2\0\16"+
    "\7\2\0\6\7\2\0\15\7\2\0\1\7\1\2\17\7\1\0\10\7\7\0\15\7\1\0\6\7\23\0\1\7\4"+
    "\0\1\7\3\0\5\7\2\0\22\7\1\0\1\7\5\0\17\7\1\0\16\7\2\0\5\7\13\0\14\7\13\0\1"+
    "\7\15\0\7\7\7\0\16\7\15\0\2\7\12\10\3\0\3\7\11\0\4\7\1\0\4\7\3\0\2\7\11\0"+
    "\10\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0\6\7\1\0\7\7\1\0\1\7\3\0\3\7\1\0\7\7\3\0"+
    "\4\7\2\0\6\7\4\0\13\2\15\0\2\1\5\0\1\2\17\0\1\2\1\0\1\7\15\0\1\7\2\0\1\7\4"+
    "\0\1\7\2\0\12\7\1\0\1\7\3\0\5\7\6\0\1\7\1\0\1\7\1\0\1\7\1\0\4\7\1\0\13\7\2"+
    "\0\4\7\5\0\5\7\4\0\1\7\4\0\2\7\13\0\5\7\6\0\4\7\3\0\2\7\14\0\10\7\7\0\10\7"+
    "\1\0\7\7\1\0\1\2\4\0\2\7\12\0\5\7\5\0\2\7\3\0\7\7\6\0\3\7\12\10\2\7\13\0\11"+
    "\7\2\0\27\7\2\0\7\7\1\0\3\7\1\0\4\7\1\0\4\7\2\0\6\7\3\0\1\7\1\0\1\7\2\0\5"+
    "\7\1\0\12\7\12\10\5\7\1\0\3\7\1\0\10\7\4\0\7\7\3\0\1\7\3\0\2\7\1\0\1\7\3\0"+
    "\2\7\2\0\5\7\2\0\1\7\1\0\1\7\30\0\3\7\3\0\6\7\2\0\6\7\2\0\6\7\11\0\7\7\4\0"+
    "\5\7\3\0\5\7\5\0\1\7\1\0\10\7\1\0\5\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0\12\7\6\0"+
    "\12\7\2\0\6\7\2\0\6\7\2\0\6\7\2\0\3\7\3\0\14\7\1\0\16\7\1\0\2\7\1\0\2\7\1"+
    "\0\10\7\6\0\4\7\4\0\16\7\2\0\1\7\1\0\14\7\1\0\2\7\3\0\1\7\2\0\4\7\1\0\2\7"+
    "\12\0\10\7\6\0\6\7\1\0\3\7\1\0\12\7\3\0\1\7\12\0\4\7\13\0\12\10\1\7\1\0\1"+
    "\7\3\0\7\7\1\0\1\7\1\0\4\7\1\0\17\7\1\0\2\7\14\0\3\7\7\0\4\7\11\0\2\7\1\0"+
    "\1\7\20\0\4\7\10\0\1\7\13\0\10\7\5\0\3\7\2\0\1\7\2\0\2\7\2\0\4\7\1\0\14\7"+
    "\1\0\1\7\1\0\7\7\1\0\21\7\1\0\4\7\2\0\10\7\1\0\7\7\1\0\14\7\1\0\4\7\1\0\5"+
    "\7\1\0\1\7\3\0\14\7\2\0\13\7\1\0\10\7\2\0\22\10\1\0\2\7\1\0\1\7\2\0\1\7\1"+
    "\0\12\7\1\0\4\7\1\0\1\7\1\0\1\7\6\0\1\7\4\0\1\7\1\0\1\7\1\0\1\7\1\0\3\7\1"+
    "\0\2\7\1\0\1\7\2\0\1\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0\1\7\2\0"+
    "\4\7\1\0\7\7\1\0\4\7\1\0\4\7\1\0\1\7\1\0\12\7\1\0\5\7\1\0\3\7\1\0\5\7\1\0"+
    "\5\7");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\2\1\20\7\1\10\1\11\1\12\1\13\1\14\1\4"+
    "\2\15\1\7\1\0\1\16\3\0\21\7\1\17\21\7"+
    "\1\20\2\7\1\21\13\7\1\6\1\22\1\23\5\7"+
    "\1\24\1\25\14\7\1\26\2\7\2\6\1\27\1\7"+
    "\1\30\1\7\1\31\1\6\13\7\1\32\1\33\2\6"+
    "\1\7\1\34\1\7\2\6\1\7\1\35\10\7\1\36"+
    "\1\37\1\6\1\7\1\40\2\6\1\41\4\7\1\42"+
    "\1\43\1\7\1\44\1\6\1\7\1\45\1\6\1\46"+
    "\1\6\1\7\1\6\1\7\1\47\1\7\3\6\1\50"+
    "\2\6\1\51\1\52\1\53\4\6\1\54\1\6\1\55"+
    "\3\6\1\56\1\57";

  private static int [] zzUnpackAction() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\165\0\234\0\303\0\352\0\u0111"+
    "\0\u0138\0\u015f\0\u0186\0\u01ad\0\u01d4\0\u01fb\0\u0222\0\u0249"+
    "\0\u0270\0\u0297\0\u02be\0\u02e5\0\u030c\0\u0333\0\u035a\0\u0381"+
    "\0\u03a8\0\u03cf\0\47\0\47\0\47\0\47\0\u03f6\0\u041d"+
    "\0\u0444\0\u046b\0\u0492\0\u0138\0\47\0\u04b9\0\u015f\0\u04e0"+
    "\0\u0507\0\u052e\0\u0555\0\u057c\0\u05a3\0\u05ca\0\u05f1\0\u0618"+
    "\0\u063f\0\u0666\0\u068d\0\u06b4\0\u06db\0\u0702\0\u0729\0\u0750"+
    "\0\u0777\0\u0111\0\u079e\0\u07c5\0\u07ec\0\u0813\0\u083a\0\u0861"+
    "\0\u0888\0\u08af\0\u08d6\0\u08fd\0\u0924\0\u094b\0\u0972\0\u0999"+
    "\0\u09c0\0\u09e7\0\u0a0e\0\u0111\0\u0a35\0\u0a5c\0\u0111\0\u0a83"+
    "\0\u0aaa\0\u0ad1\0\u0af8\0\u0b1f\0\u0b46\0\u0b6d\0\u0b94\0\u0bbb"+
    "\0\u0be2\0\u0c09\0\u0c30\0\u0111\0\u0111\0\u0c57\0\u0c7e\0\u0ca5"+
    "\0\u0ccc\0\u0cf3\0\u0111\0\u0111\0\u0d1a\0\u0d41\0\u0d68\0\u0d8f"+
    "\0\u0db6\0\u0ddd\0\u0e04\0\u0e2b\0\u0e52\0\u0e79\0\u0ea0\0\u0ec7"+
    "\0\u0111\0\u0eee\0\u0f15\0\u0f3c\0\u0f63\0\u0f8a\0\u0fb1\0\u0111"+
    "\0\u0fd8\0\u0111\0\u0fff\0\u1026\0\u104d\0\u1074\0\u109b\0\u10c2"+
    "\0\u10e9\0\u1110\0\u1137\0\u115e\0\u1185\0\u11ac\0\u0111\0\u0111"+
    "\0\u11d3\0\u11fa\0\u1221\0\u0111\0\u1248\0\u126f\0\u1296\0\u12bd"+
    "\0\u0111\0\u12e4\0\u130b\0\u1332\0\u1359\0\u1380\0\u13a7\0\u13ce"+
    "\0\u13f5\0\u0111\0\352\0\u141c\0\u1443\0\u0111\0\u146a\0\u1491"+
    "\0\u0111\0\u14b8\0\u14df\0\u1506\0\u152d\0\u0111\0\u0111\0\u1554"+
    "\0\u0111\0\u157b\0\u15a2\0\352\0\u15c9\0\u0111\0\u15f0\0\u1617"+
    "\0\u163e\0\u1665\0\352\0\u168c\0\u16b3\0\u16da\0\u1701\0\u0111"+
    "\0\u1728\0\u174f\0\u0111\0\u0111\0\352\0\u1776\0\u179d\0\u17c4"+
    "\0\u17eb\0\352\0\u1812\0\352\0\u1839\0\u1860\0\u1887\0\352"+
    "\0\352";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\2\1\6\1\7\1\2"+
    "\1\10\1\11\1\2\1\12\1\2\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\10\1\24"+
    "\1\25\1\26\1\27\1\30\2\10\1\31\1\32\2\10"+
    "\1\33\1\34\1\35\1\36\50\0\2\3\47\0\1\37"+
    "\47\0\1\5\1\40\45\0\1\41\1\0\1\6\2\42"+
    "\1\41\3\0\1\7\25\41\10\0\1\7\1\0\1\7"+
    "\2\0\1\7\3\0\26\7\10\0\1\10\1\0\1\10"+
    "\2\43\1\10\3\0\1\7\25\10\4\0\12\44\1\45"+
    "\1\46\33\44\13\47\1\50\1\45\32\47\4\0\1\10"+
    "\1\0\1\10\2\43\1\10\3\0\1\7\1\10\1\51"+
    "\3\10\1\52\17\10\10\0\1\10\1\0\1\10\2\43"+
    "\1\10\3\0\1\7\11\10\1\53\6\10\1\54\3\10"+
    "\1\55\10\0\1\10\1\0\1\10\2\43\1\10\3\0"+
    "\1\7\5\10\1\56\17\10\10\0\1\10\1\0\1\10"+
    "\2\43\1\10\3\0\1\7\1\10\1\57\10\10\1\60"+
    "\12\10\10\0\1\10\1\0\1\10\2\43\1\10\3\0"+
    "\1\7\6\10\1\61\13\10\1\62\2\10\10\0\1\10"+
    "\1\0\1\10\2\43\1\10\3\0\1\7\7\10\1\63"+
    "\15\10\10\0\1\10\1\0\1\10\2\43\1\10\3\0"+
    "\1\7\10\10\1\64\14\10\10\0\1\10\1\0\1\10"+
    "\2\43\1\10\3\0\1\7\10\10\1\65\2\10\1\66"+
    "\11\10\10\0\1\10\1\0\1\10\2\43\1\10\3\0"+
    "\1\7\7\10\1\67\15\10\10\0\1\10\1\0\1\10"+
    "\2\43\1\10\3\0\1\7\13\10\1\70\11\10\10\0"+
    "\1\10\1\0\1\10\2\43\1\10\3\0\1\7\4\10"+
    "\1\71\1\10\1\72\16\10\10\0\1\10\1\0\1\10"+
    "\2\43\1\10\3\0\1\7\10\10\1\73\14\10\10\0"+
    "\1\10\1\0\1\10\2\43\1\10\3\0\1\7\13\10"+
    "\1\74\11\10\10\0\1\10\1\0\1\10\2\43\1\10"+
    "\3\0\1\7\1\10\1\75\15\10\1\76\5\10\10\0"+
    "\1\10\1\0\1\10\2\43\1\10\3\0\1\7\17\10"+
    "\1\77\2\10\1\100\2\10\10\0\1\10\1\0\1\10"+
    "\2\43\1\10\3\0\1\7\13\10\1\101\11\10\4\0"+
    "\1\37\1\0\45\37\4\0\1\40\46\0\1\41\1\0"+
    "\1\41\2\42\1\41\3\0\1\7\25\41\10\0\1\42"+
    "\1\0\4\42\4\0\25\42\10\0\1\43\1\0\4\43"+
    "\4\0\25\43\4\0\1\44\1\0\45\44\1\47\1\0"+
    "\45\47\4\0\1\10\1\0\1\10\2\43\1\10\3\0"+
    "\1\7\2\10\1\102\22\10\10\0\1\10\1\0\1\10"+
    "\2\43\1\10\3\0\1\7\23\10\1\103\1\10\10\0"+
    "\1\10\1\0\1\10\2\43\1\10\3\0\1\7\3\10"+
    "\1\104\21\10\10\0\1\10\1\0\1\10\2\43\1\10"+
    "\3\0\1\7\1\10\1\105\23\10\10\0\1\10\1\0"+
    "\1\10\2\43\1\10\3\0\1\7\17\10\1\106\5\10"+
    "\10\0\1\10\1\0\1\10\2\43\1\10\3\0\1\7"+
    "\11\10\1\107\13\10\10\0\1\10\1\0\1\10\2\43"+
    "\1\10\3\0\1\7\12\10\1\110\12\10\10\0\1\10"+
    "\1\0\1\10\2\43\1\10\3\0\1\7\5\10\1\111"+
    "\17\10\10\0\1\10\1\0\1\10\2\43\1\10\3\0"+
    "\1\7\10\10\1\112\14\10\10\0\1\10\1\0\1\10"+
    "\2\43\1\10\3\0\1\7\1\10\1\113\23\10\10\0"+
    "\1\10\1\0\1\10\2\43\1\10\3\0\1\7\1\114"+
    "\24\10\10\0\1\10\1\0\1\10\2\43\1\10\3\0"+
    "\1\7\11\10\1\115\13\10\10\0\1\10\1\0\1\10"+
    "\2\43\1\10\3\0\1\7\16\10\1\116\6\10\10\0"+
    "\1\10\1\0\1\10\2\43\1\10\3\0\1\7\4\10"+
    "\1\117\20\10\10\0\1\10\1\0\1\10\2\43\1\10"+
    "\3\0\1\7\11\10\1\120\13\10\10\0\1\10\1\0"+
    "\1\10\2\43\1\10\3\0\1\7\7\10\1\121\15\10"+
    "\10\0\1\10\1\0\1\10\2\43\1\10\3\0\1\7"+
    "\22\10\1\122\2\10\10\0\1\10\1\0\1\10\2\43"+
    "\1\10\3\0\1\7\6\10\1\123\16\10\10\0\1\10"+
    "\1\0\1\10\2\43\1\10\3\0\1\7\13\10\1\124"+
    "\11\10\10\0\1\10\1\0\1\10\2\43\1\10\3\0"+
    "\1\7\5\10\1\125\17\10\10\0\1\10\1\0\1\10"+
    "\2\43\1\10\3\0\1\7\7\10\1\126\15\10\10\0"+
    "\1\10\1\0\1\10\2\43\1\10\3\0\1\7\4\10"+
    "\1\127\20\10\10\0\1\10\1\0\1\10\2\43\1\10"+
    "\3\0\1\7\1\10\1\130\15\10\1\131\5\10\10\0"+
    "\1\10\1\0\1\10\2\43\1\10\3\0\1\7\10\10"+
    "\1\132\14\10\10\0\1\10\1\0\1\10\2\43\1\10"+
    "\3\0\1\133\25\10\10\0\1\10\1\0\1\10\2\43"+
    "\1\10\3\0\1\7\3\10\1\134\21\10\10\0\1\10"+
    "\1\0\1\10\2\43\1\10\3\0\1\7\1\10\1\135"+
    "\23\10\10\0\1\10\1\0\1\10\2\43\1\10\3\0"+
    "\1\7\7\10\1\136\15\10\10\0\1\10\1\0\1\10"+
    "\2\43\1\10\3\0\1\7\3\10\1\137\21\10\10\0"+
    "\1\10\1\0\1\10\2\43\1\10\3\0\1\7\3\10"+
    "\1\140\21\10\10\0\1\10\1\0\1\10\2\43\1\10"+
    "\3\0\1\7\13\10\1\141\11\10\10\0\1\10\1\0"+
    "\1\10\2\43\1\10\3\0\1\7\11\10\1\142\13\10"+
    "\10\0\1\10\1\0\1\10\2\43\1\10\3\0\1\7"+
    "\1\10\1\143\23\10\10\0\1\10\1\0\1\10\2\43"+
    "\1\10\3\0\1\7\7\10\1\144\15\10\10\0\1\10"+
    "\1\0\1\10\2\43\1\10\3\0\1\7\1\10\1\145"+
    "\23\10\10\0\1\10\1\0\1\10\2\43\1\10\3\0"+
    "\1\7\1\10\1\146\23\10\10\0\1\10\1\0\1\10"+
    "\2\43\1\10\3\0\1\7\1\10\1\147\23\10\10\0"+
    "\1\10\1\0\1\10\2\43\1\10\3\0\1\7\3\10"+
    "\1\150\6\10\1\151\12\10\10\0\1\10\1\0\1\10"+
    "\2\43\1\10\3\0\1\7\1\10\1\152\23\10\10\0"+
    "\1\10\1\0\1\10\2\43\1\10\3\0\1\7\14\10"+
    "\1\153\10\10\10\0\1\10\1\0\1\10\2\43\1\10"+
    "\3\0\1\7\11\10\1\154\13\10\10\0\1\10\1\0"+
    "\1\10\2\43\1\10\3\0\1\7\3\10\1\155\3\10"+
    "\1\156\15\10\10\0\1\10\1\0\1\10\2\43\1\10"+
    "\3\0\1\7\10\10\1\157\14\10\10\0\1\10\1\0"+
    "\1\10\2\43\1\10\3\0\1\7\22\10\1\160\2\10"+
    "\10\0\1\10\1\0\1\10\2\43\1\10\3\0\1\7"+
    "\7\10\1\161\15\10\10\0\1\10\1\0\1\10\2\43"+
    "\1\10\3\0\1\7\11\10\1\162\13\10\10\0\1\10"+
    "\1\0\1\10\2\43\1\10\3\0\1\7\6\10\1\163"+
    "\16\10\10\0\1\7\1\0\1\7\2\0\1\7\3\0"+
    "\2\7\1\164\1\7\1\165\21\7\10\0\1\10\1\0"+
    "\1\10\2\43\1\10\3\0\1\7\4\10\1\166\20\10"+
    "\10\0\1\10\1\0\1\10\2\43\1\10\3\0\1\7"+
    "\4\10\1\167\20\10\10\0\1\10\1\0\1\10\2\43"+
    "\1\10\3\0\1\7\1\10\1\170\23\10\10\0\1\10"+
    "\1\0\1\10\2\43\1\10\3\0\1\7\7\10\1\171"+
    "\15\10\10\0\1\10\1\0\1\10\2\43\1\10\3\0"+
    "\1\7\1\10\1\172\23\10\10\0\1\10\1\0\1\10"+
    "\2\43\1\10\3\0\1\173\25\10\10\0\1\10\1\0"+
    "\1\10\2\43\1\10\3\0\1\7\6\10\1\174\16\10"+
    "\10\0\1\10\1\0\1\10\2\43\1\10\3\0\1\7"+
    "\3\10\1\175\21\10\10\0\1\10\1\0\1\10\2\43"+
    "\1\10\3\0\1\7\4\10\1\176\20\10\10\0\1\10"+
    "\1\0\1\10\2\43\1\10\3\0\1\7\1\10\1\177"+
    "\23\10\10\0\1\10\1\0\1\10\2\43\1\10\3\0"+
    "\1\7\6\10\1\200\16\10\10\0\1\10\1\0\1\10"+
    "\2\43\1\10\3\0\1\7\13\10\1\201\11\10\10\0"+
    "\1\10\1\0\1\10\2\43\1\10\3\0\1\7\1\10"+
    "\1\202\23\10\10\0\1\10\1\0\1\10\2\43\1\10"+
    "\3\0\1\7\10\10\1\203\14\10\10\0\1\10\1\0"+
    "\1\10\2\43\1\10\3\0\1\7\21\10\1\204\3\10"+
    "\10\0\1\10\1\0\1\10\2\43\1\10\3\0\1\7"+
    "\4\10\1\205\20\10\10\0\1\10\1\0\1\10\2\43"+
    "\1\10\3\0\1\7\17\10\1\206\5\10\10\0\1\10"+
    "\1\0\1\10\2\43\1\10\3\0\1\7\1\10\1\207"+
    "\23\10\10\0\1\10\1\0\1\10\2\43\1\10\3\0"+
    "\1\7\3\10\1\210\21\10\10\0\1\7\1\0\1\7"+
    "\2\0\1\7\3\0\10\7\1\211\15\7\10\0\1\7"+
    "\1\0\1\7\2\0\1\7\3\0\5\7\1\212\20\7"+
    "\10\0\1\10\1\0\1\10\2\43\1\10\3\0\1\7"+
    "\10\10\1\213\14\10\10\0\1\10\1\0\1\10\2\43"+
    "\1\10\3\0\1\7\3\10\1\214\21\10\10\0\1\10"+
    "\1\0\1\10\2\43\1\10\3\0\1\7\1\215\24\10"+
    "\10\0\1\7\1\0\1\7\2\0\1\7\3\0\2\7"+
    "\1\216\1\7\1\217\21\7\10\0\1\10\1\0\1\10"+
    "\2\43\1\10\3\0\1\7\17\10\1\220\5\10\10\0"+
    "\1\10\1\0\1\10\2\43\1\10\3\0\1\7\3\10"+
    "\1\221\21\10\10\0\1\10\1\0\1\10\2\43\1\10"+
    "\3\0\1\7\5\10\1\222\17\10\10\0\1\10\1\0"+
    "\1\10\2\43\1\10\3\0\1\7\6\10\1\223\16\10"+
    "\10\0\1\10\1\0\1\10\2\43\1\10\3\0\1\7"+
    "\21\10\1\224\3\10\10\0\1\10\1\0\1\10\2\43"+
    "\1\10\3\0\1\7\3\10\1\225\21\10\10\0\1\10"+
    "\1\0\1\10\2\43\1\10\3\0\1\7\5\10\1\226"+
    "\17\10\10\0\1\10\1\0\1\10\2\43\1\10\3\0"+
    "\1\7\6\10\1\227\16\10\10\0\1\10\1\0\1\10"+
    "\2\43\1\10\3\0\1\7\22\10\1\230\2\10\10\0"+
    "\1\10\1\0\1\10\2\43\1\10\3\0\1\7\1\10"+
    "\1\231\23\10\10\0\1\10\1\0\1\10\2\43\1\10"+
    "\3\0\1\7\7\10\1\232\15\10\10\0\1\7\1\0"+
    "\1\7\2\0\1\7\3\0\1\7\1\233\24\7\10\0"+
    "\1\7\1\0\1\7\2\0\1\7\3\0\6\7\1\234"+
    "\17\7\10\0\1\10\1\0\1\10\2\43\1\10\3\0"+
    "\1\7\5\10\1\235\17\10\10\0\1\10\1\0\1\10"+
    "\2\43\1\10\3\0\1\7\3\10\1\236\21\10\10\0"+
    "\1\7\1\0\1\7\2\0\1\7\3\0\10\7\1\237"+
    "\15\7\10\0\1\7\1\0\1\7\2\0\1\7\3\0"+
    "\5\7\1\240\20\7\10\0\1\10\1\0\1\10\2\43"+
    "\1\10\3\0\1\7\12\10\1\241\12\10\10\0\1\10"+
    "\1\0\1\10\2\43\1\10\3\0\1\7\7\10\1\242"+
    "\15\10\10\0\1\10\1\0\1\10\2\43\1\10\3\0"+
    "\1\7\7\10\1\243\15\10\10\0\1\10\1\0\1\10"+
    "\2\43\1\10\3\0\1\7\17\10\1\244\5\10\10\0"+
    "\1\10\1\0\1\10\2\43\1\10\3\0\1\7\1\10"+
    "\1\245\23\10\10\0\1\10\1\0\1\10\2\43\1\10"+
    "\3\0\1\7\7\10\1\246\15\10\10\0\1\10\1\0"+
    "\1\10\2\43\1\10\3\0\1\7\1\10\1\247\23\10"+
    "\10\0\1\10\1\0\1\10\2\43\1\10\3\0\1\7"+
    "\17\10\1\250\5\10\10\0\1\10\1\0\1\10\2\43"+
    "\1\10\3\0\1\7\3\10\1\251\21\10\10\0\1\7"+
    "\1\0\1\7\2\0\1\7\3\0\7\7\1\252\16\7"+
    "\10\0\1\10\1\0\1\10\2\43\1\10\3\0\1\7"+
    "\11\10\1\253\13\10\10\0\1\7\1\0\1\7\2\0"+
    "\1\7\3\0\1\7\1\254\24\7\10\0\1\7\1\0"+
    "\1\7\2\0\1\7\3\0\6\7\1\255\17\7\10\0"+
    "\1\10\1\0\1\10\2\43\1\10\3\0\1\7\4\10"+
    "\1\256\20\10\10\0\1\10\1\0\1\10\2\43\1\10"+
    "\3\0\1\257\25\10\10\0\1\10\1\0\1\10\2\43"+
    "\1\10\3\0\1\7\3\10\1\260\21\10\10\0\1\10"+
    "\1\0\1\10\2\43\1\10\3\0\1\261\25\10\10\0"+
    "\1\10\1\0\1\10\2\43\1\10\3\0\1\7\11\10"+
    "\1\262\13\10\10\0\1\7\1\0\1\7\2\0\1\7"+
    "\3\0\5\7\1\263\20\7\10\0\1\10\1\0\1\10"+
    "\2\43\1\10\3\0\1\7\11\10\1\264\13\10\10\0"+
    "\1\7\1\0\1\7\2\0\1\7\3\0\7\7\1\265"+
    "\16\7\10\0\1\7\1\0\1\7\2\0\1\7\3\0"+
    "\2\7\1\266\1\7\1\267\21\7\10\0\1\10\1\0"+
    "\1\10\2\43\1\10\3\0\1\7\1\10\1\270\23\10"+
    "\10\0\1\7\1\0\1\7\2\0\1\7\3\0\2\7"+
    "\1\271\1\7\1\272\21\7\10\0\1\10\1\0\1\10"+
    "\2\43\1\10\3\0\1\7\1\10\1\273\23\10\10\0"+
    "\1\10\1\0\1\10\2\43\1\10\3\0\1\7\23\10"+
    "\1\274\1\10\10\0\1\7\1\0\1\7\2\0\1\7"+
    "\3\0\5\7\1\275\20\7\10\0\1\7\1\0\1\7"+
    "\2\0\1\7\3\0\10\7\1\276\15\7\10\0\1\7"+
    "\1\0\1\7\2\0\1\7\3\0\5\7\1\277\20\7"+
    "\10\0\1\7\1\0\1\7\2\0\1\7\3\0\10\7"+
    "\1\300\15\7\10\0\1\7\1\0\1\7\2\0\1\7"+
    "\3\0\5\7\1\301\20\7\10\0\1\7\1\0\1\7"+
    "\2\0\1\7\3\0\1\7\1\302\24\7\10\0\1\7"+
    "\1\0\1\7\2\0\1\7\3\0\6\7\1\303\17\7"+
    "\10\0\1\7\1\0\1\7\2\0\1\7\3\0\1\7"+
    "\1\304\24\7\10\0\1\7\1\0\1\7\2\0\1\7"+
    "\3\0\6\7\1\305\17\7\10\0\1\7\1\0\1\7"+
    "\2\0\1\7\3\0\7\7\1\306\16\7\10\0\1\7"+
    "\1\0\1\7\2\0\1\7\3\0\7\7\1\307\16\7"+
    "\10\0\1\7\1\0\1\7\2\0\1\7\3\0\5\7"+
    "\1\310\20\7\10\0\1\7\1\0\1\7\2\0\1\7"+
    "\3\0\5\7\1\311\20\7\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6318];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\30\1\4\11\5\1\1\0\1\11\3\0"+
    "\241\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _SleecLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _SleecLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }
  boolean zzAtBOL;
  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 48: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 49: break;
          case 3: 
            { return OP_4;
            } 
            // fall through
          case 50: break;
          case 4: 
            { return NUMBER;
            } 
            // fall through
          case 51: break;
          case 5: 
            { return CONSTANT_ID;
            } 
            // fall through
          case 52: break;
          case 6: 
            { return ID;
            } 
            // fall through
          case 53: break;
          case 7: 
            { return MEASURE_ID;
            } 
            // fall through
          case 54: break;
          case 8: 
            { return OP_1;
            } 
            // fall through
          case 55: break;
          case 9: 
            { return OP_2;
            } 
            // fall through
          case 56: break;
          case 10: 
            { return OP_3;
            } 
            // fall through
          case 57: break;
          case 11: 
            { return OP_5;
            } 
            // fall through
          case 58: break;
          case 12: 
            { return COMMENT;
            } 
            // fall through
          case 59: break;
          case 13: 
            { return EVENT_ID;
            } 
            // fall through
          case 60: break;
          case 14: 
            { return STRING;
            } 
            // fall through
          case 61: break;
          case 15: 
            { return OR;
            } 
            // fall through
          case 62: break;
          case 16: 
            { return AND;
            } 
            // fall through
          case 63: break;
          case 17: 
            { return NOT;
            } 
            // fall through
          case 64: break;
          case 18: 
            { return DAYS;
            } 
            // fall through
          case 65: break;
          case 19: 
            { return ELSE;
            } 
            // fall through
          case 66: break;
          case 20: 
            { return TRUE;
            } 
            // fall through
          case 67: break;
          case 21: 
            { return THEN;
            } 
            // fall through
          case 68: break;
          case 22: 
            { return WHEN;
            } 
            // fall through
          case 69: break;
          case 23: 
            { return EVENT;
            } 
            // fall through
          case 70: break;
          case 24: 
            { return FALSE;
            } 
            // fall through
          case 71: break;
          case 25: 
            { return SCALE;
            } 
            // fall through
          case 72: break;
          case 26: 
            { return WHILE;
            } 
            // fall through
          case 73: break;
          case 27: 
            { return HOURS;
            } 
            // fall through
          case 74: break;
          case 28: 
            { return EXISTS;
            } 
            // fall through
          case 75: break;
          case 29: 
            { return UNLESS;
            } 
            // fall through
          case 76: break;
          case 30: 
            { return WITHIN;
            } 
            // fall through
          case 77: break;
          case 31: 
            { return DEF_END;
            } 
            // fall through
          case 78: break;
          case 32: 
            { return SECONDS;
            } 
            // fall through
          case 79: break;
          case 33: 
            { return NUMERIC;
            } 
            // fall through
          case 80: break;
          case 34: 
            { return BOOLEAN;
            } 
            // fall through
          case 81: break;
          case 35: 
            { return MEASURE;
            } 
            // fall through
          case 82: break;
          case 36: 
            { return MINUTES;
            } 
            // fall through
          case 83: break;
          case 37: 
            { return RULE_END;
            } 
            // fall through
          case 84: break;
          case 38: 
            { return CONSTANT;
            } 
            // fall through
          case 85: break;
          case 39: 
            { return DEF_START;
            } 
            // fall through
          case 86: break;
          case 40: 
            { return OTHERWISE;
            } 
            // fall through
          case 87: break;
          case 41: 
            { return MEANWHILE;
            } 
            // fall through
          case 88: break;
          case 42: 
            { return EVENTUALLY;
            } 
            // fall through
          case 89: break;
          case 43: 
            { return RULE_START;
            } 
            // fall through
          case 90: break;
          case 44: 
            { return CONCERN_END;
            } 
            // fall through
          case 91: break;
          case 45: 
            { return PURPOSE_END;
            } 
            // fall through
          case 92: break;
          case 46: 
            { return CONCERN_START;
            } 
            // fall through
          case 93: break;
          case 47: 
            { return PURPOSE_START;
            } 
            // fall through
          case 94: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
